<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>Admin</web>
  <name>UsedSpace</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Admin.Tools</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1262300400000</creationDate>
  <date>1262300400000</date>
  <contentUpdateDate>1262300400000</contentUpdateDate>
  <version>1.1</version>
  <title>Space Used</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>This amount represent all space consumed on the XWiki servers including documents, pages, attachments but also the recycle bin and history of pages and attachments

Keep in mind that the recycle bin of attachments and the history of pages and attachments are using up the most space and this space can be recovered.

{{groovy}}

total = 0
def runQuery(query) {
    def context2 = xcontext.getContext();
    def store = xwiki.getXWiki().getStore().getStore();
    store.beginTransaction(context2);
    def session = store.getSession(context2);
    def connection = session.connection();
    def stmt = connection.createStatement();
    def list = new ArrayList()
    try {
       sql = request.query;
       def resultset = stmt.executeQuery(query);
       def mdata = resultset.getMetaData();
       def nbcols = mdata.getColumnCount();
       while (true) {
          resultset.next();
          def map = new HashMap()
          for (i=1;i&lt;=nbcols;i++) {
           def value = resultset.getObject(i);
           if ((value==null)||(value==""))
            value = ""
           map.put(mdata.getColumnName(i), value)
          }
          list.add(map);
          if (resultset.isLast())         
            break;
       } 
       stmt.close();
       return list;
    } catch (Exception e2) {
       return "Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
 }

def showSpaceUsed(message, table, wiki) {
 def mwikiquery = (wiki=="") ? "" : "AND TABLE_SCHEMA = '${wiki}'"
 def query = (table=="") ? "SELECT SUM(DATA_LENGTH)/1024/1024 as 'space' FROM INFORMATION_SCHEMA.TABLES  WHERE 1=1 ${mwikiquery}" : "SELECT SUM(DATA_LENGTH)/1024/1024 as 'space' FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_NAME='${table}' ${mwikiquery}"
 def spaceleftresult = runQuery(query)
 if (spaceleftresult.size()==0 || spaceleftresult.get(0).get("space")==null)
  return "** ${message}: ?"
 def spaceleft = spaceleftresult.get(0).get("space")
 try {
  spaceleft = Math.floor(spaceleft * 10) / 10;
  total += spaceleft
  return "** ${message}: ${spaceleft}MB"
 } catch (Exception e) {
  return "** ${message}: ${spaceleft} ? (${e.getMessage()}"
 }
}

def showWikiSpace(wiki) {
 if (wiki=="")
  println "* All Wikis" 
 else
  println "* Wiki ${wiki}"
 total = 0
 println showSpaceUsed("Total Space used",  "", wiki)
 def fulltotal = total
 total = 0
 println showSpaceUsed("Attachment Space used",  "xwikiattachment_content", wiki)
 println showSpaceUsed("Attachment History Space used",  "xwikiattachment_archive", wiki)
 println showSpaceUsed("Attachment Recycle bin Space used",  "xwikiattrecyclebin", wiki)
 println showSpaceUsed("History Space used",  "xwikircs", wiki)
 println showSpaceUsed("Recycle bin Space used",  "xwikirecyclebin", wiki)
 def pagesspace = fulltotal - total
 pagesspace = Math.floor(pagesspace * 10) / 10
 println "** Other Space used ${pagesspace}MB"
}

if (xwiki.isVirtual()) {
  def wikilist = xwiki.wikimanager.getAllWikis()
  showWikiSpace("")
  for (wiki in wikilist) {
     showWikiSpace(wiki.toString())
  }
} else {
  showWikiSpace(xcontext.database)
}

{{/groovy}}</content>
</xwikidoc>
