<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Admin</web>
<name>CheckIndexes</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>Admin.Tools</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1374677029000</creationDate>
<date>1374854368000</date>
<contentUpdateDate>1374854368000</contentUpdateDate>
<version>84.1</version>
<title>XWiki Database Indexes Check</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{velocity}}

#set($indexesDocument = "Admin.CheckIndexesSQL")

{{info}}This script reads from the page $indexesDocument and only reports not found indexes.{{/info}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

 #set($indexes = $xwiki.getDocument($indexesDocument).getContent())

 #foreach($wiki in $dbs)
== Working on wiki $wiki ==
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0].trim())
   #set($key=$arrayline[1].trim().toUpperCase())
   #set($col=$arrayline[2].trim().toUpperCase())
   #set($query = "show index from $tab from $wiki where key_name='$key';")
   #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))
   #set($results = $sqlTools.getResults($connection, $query, true))
   ## We only list this index if it's there
   #if(! $results.contains($tab))
     * Index $key on column $col from table $tab doesn't exist!
   #end
  #end
 #end
#end
{{/velocity}}</content>
<versions>head	84.1;
access;
symbols;
locks; strict;
comment	@# @;


84.1
date	2013.07.26.17.59.28;	author XWiki_2EAdmin;	state full;
branches;
next	83.1;

83.1
date	2013.07.26.17.42.13;	author XWiki_2EAdmin;	state diff;
branches;
next	82.1;

82.1
date	2013.07.26.17.36.10;	author XWiki_2EAdmin;	state diff;
branches;
next	81.1;

81.1
date	2013.07.26.17.36.01;	author XWiki_2EAdmin;	state diff;
branches;
next	80.1;

80.1
date	2013.07.26.17.33.14;	author XWiki_2EAdmin;	state full;
branches;
next	79.1;

79.1
date	2013.07.26.17.31.40;	author XWiki_2EAdmin;	state diff;
branches;
next	78.1;

78.1
date	2013.07.26.17.30.18;	author XWiki_2EAdmin;	state diff;
branches;
next	77.1;

77.1
date	2013.07.26.17.30.05;	author XWiki_2EAdmin;	state diff;
branches;
next	76.1;

76.1
date	2013.07.26.17.29.58;	author XWiki_2EAdmin;	state diff;
branches;
next	75.1;

75.1
date	2013.07.26.17.26.25;	author XWiki_2EAdmin;	state full;
branches;
next	74.1;

74.1
date	2013.07.26.17.21.07;	author XWiki_2EAdmin;	state diff;
branches;
next	73.1;

73.1
date	2013.07.26.17.20.51;	author XWiki_2EAdmin;	state diff;
branches;
next	72.1;

72.1
date	2013.07.24.16.43.25;	author XWiki_2EAdmin;	state diff;
branches;
next	71.1;

71.1
date	2013.07.24.16.43.02;	author XWiki_2EAdmin;	state diff;
branches;
next	70.1;

70.1
date	2013.07.24.16.41.34;	author XWiki_2EAdmin;	state full;
branches;
next	69.1;

69.1
date	2013.07.24.16.36.14;	author XWiki_2EAdmin;	state diff;
branches;
next	68.1;

68.1
date	2013.07.24.16.34.58;	author XWiki_2EAdmin;	state diff;
branches;
next	67.1;

67.1
date	2013.07.24.16.34.26;	author XWiki_2EAdmin;	state diff;
branches;
next	66.1;

66.1
date	2013.07.24.16.30.47;	author XWiki_2EAdmin;	state diff;
branches;
next	65.1;

65.1
date	2013.07.24.16.30.18;	author XWiki_2EAdmin;	state full;
branches;
next	64.1;

64.1
date	2013.07.24.16.29.27;	author XWiki_2EAdmin;	state diff;
branches;
next	63.1;

63.1
date	2013.07.24.16.29.14;	author XWiki_2EAdmin;	state diff;
branches;
next	62.1;

62.1
date	2013.07.24.16.29.03;	author XWiki_2EAdmin;	state diff;
branches;
next	61.1;

61.1
date	2013.07.24.16.28.45;	author XWiki_2EAdmin;	state diff;
branches;
next	60.1;

60.1
date	2013.07.24.16.27.58;	author XWiki_2EAdmin;	state full;
branches;
next	59.1;

59.1
date	2013.07.24.16.13.45;	author XWiki_2EAdmin;	state diff;
branches;
next	58.1;

58.1
date	2013.07.24.16.12.36;	author XWiki_2EAdmin;	state diff;
branches;
next	57.1;

57.1
date	2013.07.24.16.07.08;	author XWiki_2EAdmin;	state diff;
branches;
next	56.1;

56.1
date	2013.07.24.15.53.08;	author XWiki_2EAdmin;	state diff;
branches;
next	55.1;

55.1
date	2013.07.24.15.52.38;	author XWiki_2EAdmin;	state full;
branches;
next	54.1;

54.1
date	2013.07.24.15.52.24;	author XWiki_2EAdmin;	state diff;
branches;
next	53.1;

53.1
date	2013.07.24.15.51.47;	author XWiki_2EAdmin;	state diff;
branches;
next	52.1;

52.1
date	2013.07.24.15.50.54;	author XWiki_2EAdmin;	state diff;
branches;
next	51.1;

51.1
date	2013.07.24.15.50.32;	author XWiki_2EAdmin;	state diff;
branches;
next	50.1;

50.1
date	2013.07.24.15.50.16;	author XWiki_2EAdmin;	state full;
branches;
next	49.1;

49.1
date	2013.07.24.15.50.11;	author XWiki_2EAdmin;	state diff;
branches;
next	48.1;

48.1
date	2013.07.24.15.41.05;	author XWiki_2EAdmin;	state diff;
branches;
next	47.1;

47.1
date	2013.07.24.15.40.20;	author XWiki_2EAdmin;	state diff;
branches;
next	46.1;

46.1
date	2013.07.24.15.40.09;	author XWiki_2EAdmin;	state diff;
branches;
next	45.1;

45.1
date	2013.07.24.15.39.27;	author XWiki_2EAdmin;	state full;
branches;
next	44.1;

44.1
date	2013.07.24.15.37.10;	author XWiki_2EAdmin;	state diff;
branches;
next	43.1;

43.1
date	2013.07.24.15.35.58;	author XWiki_2EAdmin;	state diff;
branches;
next	42.1;

42.1
date	2013.07.24.15.35.44;	author XWiki_2EAdmin;	state diff;
branches;
next	41.1;

41.1
date	2013.07.24.15.23.53;	author XWiki_2EAdmin;	state diff;
branches;
next	40.1;

40.1
date	2013.07.24.15.22.35;	author XWiki_2EAdmin;	state full;
branches;
next	39.1;

39.1
date	2013.07.24.15.22.29;	author XWiki_2EAdmin;	state diff;
branches;
next	38.1;

38.1
date	2013.07.24.15.22.19;	author XWiki_2EAdmin;	state diff;
branches;
next	37.1;

37.1
date	2013.07.24.15.22.09;	author XWiki_2EAdmin;	state diff;
branches;
next	36.1;

36.1
date	2013.07.24.15.20.55;	author XWiki_2EAdmin;	state diff;
branches;
next	35.1;

35.1
date	2013.07.24.15.20.49;	author XWiki_2EAdmin;	state full;
branches;
next	34.1;

34.1
date	2013.07.24.15.19.25;	author XWiki_2EAdmin;	state diff;
branches;
next	33.1;

33.1
date	2013.07.24.15.19.20;	author XWiki_2EAdmin;	state diff;
branches;
next	32.1;

32.1
date	2013.07.24.15.19.00;	author XWiki_2EAdmin;	state diff;
branches;
next	31.1;

31.1
date	2013.07.24.15.18.53;	author XWiki_2EAdmin;	state diff;
branches;
next	30.1;

30.1
date	2013.07.24.15.18.45;	author XWiki_2EAdmin;	state full;
branches;
next	29.1;

29.1
date	2013.07.24.15.18.23;	author XWiki_2EAdmin;	state diff;
branches;
next	28.1;

28.1
date	2013.07.24.15.17.31;	author XWiki_2EAdmin;	state diff;
branches;
next	27.1;

27.1
date	2013.07.24.15.16.21;	author XWiki_2EAdmin;	state diff;
branches;
next	26.1;

26.1
date	2013.07.24.15.15.29;	author XWiki_2EAdmin;	state diff;
branches;
next	25.1;

25.1
date	2013.07.24.15.15.10;	author XWiki_2EAdmin;	state full;
branches;
next	24.1;

24.1
date	2013.07.24.15.14.17;	author XWiki_2EAdmin;	state diff;
branches;
next	23.1;

23.1
date	2013.07.24.15.12.28;	author XWiki_2EAdmin;	state diff;
branches;
next	22.1;

22.1
date	2013.07.24.15.10.11;	author XWiki_2EAdmin;	state diff;
branches;
next	21.1;

21.1
date	2013.07.24.15.10.00;	author XWiki_2EAdmin;	state diff;
branches;
next	20.1;

20.1
date	2013.07.24.15.09.45;	author XWiki_2EAdmin;	state full;
branches;
next	19.1;

19.1
date	2013.07.24.15.09.35;	author XWiki_2EAdmin;	state diff;
branches;
next	18.1;

18.1
date	2013.07.24.15.09.03;	author XWiki_2EAdmin;	state diff;
branches;
next	17.1;

17.1
date	2013.07.24.15.08.46;	author XWiki_2EAdmin;	state diff;
branches;
next	16.1;

16.1
date	2013.07.24.15.07.31;	author XWiki_2EAdmin;	state diff;
branches;
next	15.1;

15.1
date	2013.07.24.15.06.48;	author XWiki_2EAdmin;	state full;
branches;
next	14.1;

14.1
date	2013.07.24.15.05.48;	author XWiki_2EAdmin;	state diff;
branches;
next	13.1;

13.1
date	2013.07.24.15.05.39;	author XWiki_2EAdmin;	state diff;
branches;
next	12.1;

12.1
date	2013.07.24.15.05.09;	author XWiki_2EAdmin;	state diff;
branches;
next	11.1;

11.1
date	2013.07.24.15.04.30;	author XWiki_2EAdmin;	state diff;
branches;
next	10.1;

10.1
date	2013.07.24.15.01.57;	author XWiki_2EAdmin;	state full;
branches;
next	9.1;

9.1
date	2013.07.24.15.01.37;	author XWiki_2EAdmin;	state diff;
branches;
next	8.1;

8.1
date	2013.07.24.14.39.27;	author XWiki_2EAdmin;	state diff;
branches;
next	7.1;

7.1
date	2013.07.24.14.38.54;	author XWiki_2EAdmin;	state diff;
branches;
next	6.1;

6.1
date	2013.07.24.14.38.44;	author XWiki_2EAdmin;	state diff;
branches;
next	5.1;

5.1
date	2013.07.24.14.38.27;	author XWiki_2EAdmin;	state full;
branches;
next	4.1;

4.1
date	2013.07.24.13.46.33;	author XWiki_2EAdmin;	state diff;
branches;
next	3.1;

3.1
date	2013.07.24.13.44.30;	author XWiki_2EAdmin;	state diff;
branches;
next	2.1;

2.1
date	2013.07.24.13.40.23;	author XWiki_2EAdmin;	state diff;
branches;
next	1.1;

1.1
date	2013.01.02.17.18.32;	author XWiki_2EAdmin;	state diff;
branches;
next	;


desc
@@


84.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374677029000&lt;/creationDate&gt;
&lt;date&gt;1374854368000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374854368000&lt;/contentUpdateDate&gt;
&lt;version&gt;84.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#set($indexesDocument = "Admin.CheckIndexesSQL")

{{info}}This script reads from the page $indexesDocument and only reports not found indexes.{{/info}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

 #set($indexes = $xwiki.getDocument($indexesDocument).getContent())

 #foreach($wiki in $dbs)
== Working on wiki $wiki ==
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0].trim())
   #set($key=$arrayline[1].trim().toUpperCase())
   #set($col=$arrayline[2].trim().toUpperCase())
   #set($query = "show index from $tab from $wiki where key_name='$key';")
   #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))
   #set($results = $sqlTools.getResults($connection, $query, true))
   ## We only list this index if it's there
   #if(! $results.contains($tab))
     * Index $key on column $col from table $tab doesn't exist!
   #end
  #end
 #end
#end
{{/velocity}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


83.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374853333000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374853333000&lt;/contentUpdateDate&gt;
&lt;version&gt;83.1&lt;/version&gt;
d26 1
a26 1
#set($indexesDocument = "Admin.CheckIndexesSQL2")
@


82.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374852970000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852970000&lt;/contentUpdateDate&gt;
&lt;version&gt;82.1&lt;/version&gt;
d26 4
d44 1
a44 1
 #set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())
d57 2
a58 2
   #if($results.contains($tab))
     $results
d63 1
a63 2
{{/velocity}}
&lt;/content&gt;&lt;/xwikidoc&gt;
@


81.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374852961000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852961000&lt;/contentUpdateDate&gt;
&lt;version&gt;81.1&lt;/version&gt;
d54 1
a54 1
     $result
@


80.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374677029000&lt;/creationDate&gt;
&lt;date&gt;1374852794000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852794000&lt;/contentUpdateDate&gt;
&lt;version&gt;80.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

 #set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
== Working on wiki $wiki ==
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0].trim())
   #set($key=$arrayline[1].trim().toUpperCase())
   #set($col=$arrayline[2].trim().toUpperCase())
   #set($query = "show index from $tab from $wiki where key_name='$key';")
   #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))
   #set($results = $sqlTools.getResults($connection, $query, true))
   $results
  #end
 #end
#end
{{/velocity}}
&lt;/content&gt;&lt;/xwikidoc&gt;@


79.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374852700000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852700000&lt;/contentUpdateDate&gt;
&lt;version&gt;79.1&lt;/version&gt;
d49 1
a49 1
   #set($query = "show index from $tab where key_name='$key';")
@


78.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374852618000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852618000&lt;/contentUpdateDate&gt;
&lt;version&gt;78.1&lt;/version&gt;
d49 1
a49 1
   #set($query = "show indexes from $tab where key_name='$key';")
@


77.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374852605000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852605000&lt;/contentUpdateDate&gt;
&lt;version&gt;77.1&lt;/version&gt;
d52 1
a52 1
   $results.trim()
@


76.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374852598000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852598000&lt;/contentUpdateDate&gt;
&lt;version&gt;76.1&lt;/version&gt;
d52 1
a52 1
   $results
@


75.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374677029000&lt;/creationDate&gt;
&lt;date&gt;1374852385000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852385000&lt;/contentUpdateDate&gt;
&lt;version&gt;75.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

 #set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
== Working on wiki $wiki ==
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0].trim())
   #set($key=$arrayline[1].trim().toUpperCase())
   #set($col=$arrayline[2].trim().toUpperCase())
   #set($query = "show indexes from $tab where key_name='$key';")
   #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))
   #set($results = $sqlTools.getResults($connection, $query, true))
   $results
  #end
 #end
#end
{{/velocity}}


{{groovy}}
/*

DEPRECATED CODE

def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


74.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374852067000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852067000&lt;/contentUpdateDate&gt;
&lt;version&gt;74.1&lt;/version&gt;
a54 1

@


73.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374852051000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374852051000&lt;/contentUpdateDate&gt;
&lt;version&gt;73.1&lt;/version&gt;
d46 3
a48 4
   $arrayline
   ##set($tab=$arrayline[0].trim())
   ##set($key=$arrayline[1].trim().toUpperCase())
   ##set($col=$arrayline[2].trim().toUpperCase())
@


72.1
log
@@
text
@d4 1
a4 1
&lt;name&gt;CheckIndexes2&lt;/name&gt;
d13 4
a16 4
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374677005000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374677005000&lt;/contentUpdateDate&gt;
&lt;version&gt;72.1&lt;/version&gt;
d46 4
a49 3
   #set($tab=$arrayline[0].trim())
   #set($key=$arrayline[1].trim().toUpperCase())
   #set($col=$arrayline[2].trim().toUpperCase())
@


71.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374676982000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676982000&lt;/contentUpdateDate&gt;
&lt;version&gt;71.1&lt;/version&gt;
d49 1
a49 1
   #set($query = 'show indexes from "$tab" where key_name="$key";')
@


70.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374676894000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676498000&lt;/contentUpdateDate&gt;
&lt;version&gt;70.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

 #set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
== Working on wiki $wiki ==
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0].trim())
   #set($key=$arrayline[1].trim().toUpperCase())
   #set($col=$arrayline[2].trim().toUpperCase())
   #set($query = "show indexes from $tab where key_name=$key;")
   #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))
   #set($results = $sqlTools.getResults($connection, $query, true))
   $results
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*

DEPRECATED CODE

def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


69.1
log
@@
text
@d14 1
a14 1
&lt;date&gt;1374676574000&lt;/date&gt;
d16 1
a16 1
&lt;version&gt;69.1&lt;/version&gt;
@


68.1
log
@@
text
@d14 1
a14 1
&lt;date&gt;1374676498000&lt;/date&gt;
d16 1
a16 1
&lt;version&gt;68.1&lt;/version&gt;
@


67.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374676466000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676466000&lt;/contentUpdateDate&gt;
&lt;version&gt;67.1&lt;/version&gt;
d46 1
a46 1
   #set($tab=$arrayline[0].trim().toUpperCase())
@


66.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374676247000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676247000&lt;/contentUpdateDate&gt;
&lt;version&gt;66.1&lt;/version&gt;
d49 1
a49 2
   $col
   #set($query = "show indexes from $tab where column_name=$key;")
@


65.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374676218000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676218000&lt;/contentUpdateDate&gt;
&lt;version&gt;65.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

 #set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
== Working on wiki $wiki ==
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0])
   #set($key=$arrayline[1])
   #set($col=$arrayline[2].trim().toUpperCase())
   $col
   #set($query = "show indexes from $tab where column_name=$col;")
   #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))
   #set($results = $sqlTools.getResults($connection, $query, true))
   $results
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*

DEPRECATED CODE

def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


64.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374676167000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676167000&lt;/contentUpdateDate&gt;
&lt;version&gt;64.1&lt;/version&gt;
d48 1
a48 1
   #set($col=$arrayline[2].trim())
@


63.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374676154000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676154000&lt;/contentUpdateDate&gt;
&lt;version&gt;63.1&lt;/version&gt;
d48 1
a48 1
   #set($col=$arrayline[2].trim().toUppercase())
@


62.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374676143000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676143000&lt;/contentUpdateDate&gt;
&lt;version&gt;62.1&lt;/version&gt;
d49 1
@


61.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374676125000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676125000&lt;/contentUpdateDate&gt;
&lt;version&gt;61.1&lt;/version&gt;
d49 1
a49 1
   #set($query = "show indexes from $tab where column_name=${col};")
@


60.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374676078000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374676078000&lt;/contentUpdateDate&gt;
&lt;version&gt;60.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

 #set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
== Working on wiki $wiki ==
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0])
   #set($key=$arrayline[1])
   #set($col=$arrayline[2].trim())
   #set($query = "show indexes from $tab where column_name=$col.toUppercase();")
   #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))
   #set($results = $sqlTools.getResults($connection, $query, true))
   $results
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*

DEPRECATED CODE

def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


59.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374675225000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374675225000&lt;/contentUpdateDate&gt;
&lt;version&gt;59.1&lt;/version&gt;
d49 1
a49 1
   #set($query = "create index ${key} on ${tab} ${col};")
@


58.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374675156000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374675156000&lt;/contentUpdateDate&gt;
&lt;version&gt;58.1&lt;/version&gt;
a43 1
  #set($connection = $sqlTools.getXWikiConnection($xwiki, $xcontext))
d50 1
@


57.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374674828000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374674828000&lt;/contentUpdateDate&gt;
&lt;version&gt;57.1&lt;/version&gt;
d43 1
d51 2
a52 2
   ##set($results = $sqlTools.getResults($connection, $query, true))
   $query
d62 3
@


56.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374673988000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673988000&lt;/contentUpdateDate&gt;
&lt;version&gt;56.1&lt;/version&gt;
d40 1
a40 1
#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())
d43 1
d49 3
a51 1
   Creating index $key of column $col on table $tab
@


55.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374673958000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673958000&lt;/contentUpdateDate&gt;
&lt;version&gt;55.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0].trim())
   #set($key=$arrayline[1].trim())
   #set($col=$arrayline[2].trim())
   Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


54.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374673944000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673944000&lt;/contentUpdateDate&gt;
&lt;version&gt;54.1&lt;/version&gt;
d45 1
a45 1
   #set($tab=$arrayline[0])
d47 1
a47 1
   #set($col=$arrayline[2])
@


53.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374673907000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673907000&lt;/contentUpdateDate&gt;
&lt;version&gt;53.1&lt;/version&gt;
d46 1
a46 1
   #set($key=$arrayline[1])
@


52.1
log
@Rollback to version 48.1
@
text
@d14 3
a16 3
&lt;date&gt;1374673854000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673854000&lt;/contentUpdateDate&gt;
&lt;version&gt;52.1&lt;/version&gt;
d20 1
a20 1
&lt;comment&gt;Rollback to version 48.1&lt;/comment&gt;
d45 1
a45 1
   #set($tab=$arrayline[0].chomp())
@


51.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374673832000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673832000&lt;/contentUpdateDate&gt;
&lt;version&gt;51.1&lt;/version&gt;
d20 1
a20 1
&lt;comment&gt;&lt;/comment&gt;
d45 3
a47 3
   #set($tab=$arrayline[0])
   #set($key=$arrayline[1].chomp('\n'))
   #set($col=$arrayline[2].chomp('\n'))
@


50.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374673816000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673811000&lt;/contentUpdateDate&gt;
&lt;version&gt;50.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   #set($tab=$arrayline[0].chomp('\n'))
   #set($key=$arrayline[1].chomp('\n'))
   #set($col=$arrayline[2].chomp('\n'))
   Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


49.1
log
@@
text
@d14 1
a14 1
&lt;date&gt;1374673811000&lt;/date&gt;
d16 1
a16 1
&lt;version&gt;49.1&lt;/version&gt;
@


48.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374673265000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673265000&lt;/contentUpdateDate&gt;
&lt;version&gt;48.1&lt;/version&gt;
d45 3
a47 3
   #set($tab=$arrayline[0].chomp())
   #set($key=$arrayline[1])
   #set($col=$arrayline[2])
@


47.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374673220000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673220000&lt;/contentUpdateDate&gt;
&lt;version&gt;47.1&lt;/version&gt;
d45 1
a45 1
   #set($tab=$arrayline[0])
@


46.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374673209000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673209000&lt;/contentUpdateDate&gt;
&lt;version&gt;46.1&lt;/version&gt;
d45 3
a47 3
   ##set($tab=$arrayline[0])
   ##set($key=$arrayline[1])
   ##set($col=$arrayline[2])
@


45.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374673167000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374673167000&lt;/contentUpdateDate&gt;
&lt;version&gt;45.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   ##set($tab=$arrayline[0])
   ##set($key=$arrayline[1])
   ##set($col=$arrayline[2])
   #Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


44.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374673030000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374672958000&lt;/contentUpdateDate&gt;
&lt;version&gt;44.1&lt;/version&gt;
d45 4
a48 5
   $arrayline[1]
   ##set($tab=$arrayline.get(0))
   ##set($key=$arrayline.get(1))
   ##set($col=$arrayline.get(2))
   ##Creating index $key of column $col on table $tab
@


43.1
log
@@
text
@d14 1
a14 1
&lt;date&gt;1374672958000&lt;/date&gt;
d16 1
a16 1
&lt;version&gt;43.1&lt;/version&gt;
@


42.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374672944000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374672233000&lt;/contentUpdateDate&gt;
&lt;version&gt;42.1&lt;/version&gt;
d45 1
a45 1
   $arrayline[0]
@


41.1
log
@@
text
@d14 1
a14 1
&lt;date&gt;1374672233000&lt;/date&gt;
d16 1
a16 1
&lt;version&gt;41.1&lt;/version&gt;
@


40.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374672155000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374672155000&lt;/contentUpdateDate&gt;
&lt;version&gt;40.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $line.split(':'))
   $arrayline[1]
   ##set($tab=$arrayline.get(0))
   ##set($key=$arrayline.get(1))
   ##set($col=$arrayline.get(2))
   ##Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


39.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374672149000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374672149000&lt;/contentUpdateDate&gt;
&lt;version&gt;39.1&lt;/version&gt;
d45 1
a45 1
   $arrayline[0]
@


38.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374672139000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374672139000&lt;/contentUpdateDate&gt;
&lt;version&gt;38.1&lt;/version&gt;
d45 1
a45 1
   $arrayline
@


37.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374672129000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374672129000&lt;/contentUpdateDate&gt;
&lt;version&gt;37.1&lt;/version&gt;
d44 1
a44 1
   #set($arrayline = line.split(':'))
@


36.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374672055000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374672055000&lt;/contentUpdateDate&gt;
&lt;version&gt;36.1&lt;/version&gt;
d44 2
a45 2
   #set($arrayline = $stringtool.split($line,':'))
   $arrayline[1]
@


35.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374672049000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374672049000&lt;/contentUpdateDate&gt;
&lt;version&gt;35.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $stringtool.split($line,':'))
   $arrayline[0]
   ##set($tab=$arrayline.get(0))
   ##set($key=$arrayline.get(1))
   ##set($col=$arrayline.get(2))
   ##Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


34.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671965000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671965000&lt;/contentUpdateDate&gt;
&lt;version&gt;34.1&lt;/version&gt;
d45 1
a45 1
   $arrayline.get(1)
@


33.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671960000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671960000&lt;/contentUpdateDate&gt;
&lt;version&gt;33.1&lt;/version&gt;
d45 1
a45 1
   $arrayline.get(0)
@


32.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671940000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671940000&lt;/contentUpdateDate&gt;
&lt;version&gt;32.1&lt;/version&gt;
d44 2
a45 2
   #set($arrayline = $stringtool.split($line,' '))
   $line.class.name
@


31.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671933000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671933000&lt;/contentUpdateDate&gt;
&lt;version&gt;31.1&lt;/version&gt;
d45 1
a45 1
   $line
@


30.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374671925000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671925000&lt;/contentUpdateDate&gt;
&lt;version&gt;30.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $stringtool.split($line,' '))
   $line.get(0)
   ##set($tab=$arrayline.get(0))
   ##set($key=$arrayline.get(1))
   ##set($col=$arrayline.get(2))
   ##Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


29.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671903000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671903000&lt;/contentUpdateDate&gt;
&lt;version&gt;29.1&lt;/version&gt;
d45 1
a45 1
   $arrayline.get(0)
@


28.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671851000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671781000&lt;/contentUpdateDate&gt;
&lt;version&gt;28.1&lt;/version&gt;
d45 1
a45 1
   $arrayline.class.name
@


27.1
log
@@
text
@d14 1
a14 1
&lt;date&gt;1374671781000&lt;/date&gt;
d16 1
a16 1
&lt;version&gt;27.1&lt;/version&gt;
@


26.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671729000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671710000&lt;/contentUpdateDate&gt;
&lt;version&gt;26.1&lt;/version&gt;
a45 1
   $arrayline
@


25.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374671710000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671710000&lt;/contentUpdateDate&gt;
&lt;version&gt;25.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $stringtool.split($line,' '))
   $arrayline.class.name
   $arrayline
   ##set($tab=$arrayline.get(0))
   ##set($key=$arrayline.get(1))
   ##set($col=$arrayline.get(2))
   ##Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


24.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671657000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671657000&lt;/contentUpdateDate&gt;
&lt;version&gt;24.1&lt;/version&gt;
d46 2
a47 1
   #set($tab=$arrayline.get(0))
d50 1
a50 1
   Creating index $key of column $col on table $tab
@


23.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671548000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671548000&lt;/contentUpdateDate&gt;
&lt;version&gt;23.1&lt;/version&gt;
d44 1
a44 1
   #set($arrayline = $stringtool.split($line,':'))
d46 1
a46 1
   ##set($tab=$arrayline.get(0))
@


22.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671411000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671411000&lt;/contentUpdateDate&gt;
&lt;version&gt;22.1&lt;/version&gt;
d45 1
a45 1
   $arrayline.get(1)
@


21.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671400000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671400000&lt;/contentUpdateDate&gt;
&lt;version&gt;21.1&lt;/version&gt;
d45 1
a45 1
   $arrayline.get(0)
@


20.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374671385000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671385000&lt;/contentUpdateDate&gt;
&lt;version&gt;20.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes.split('\n'))
   #set($arrayline = $stringtool.split($line,':'))
   $arrayline
   ##set($tab=$arrayline.get(0))
   ##set($key=$arrayline.get(1))
   ##set($col=$arrayline.get(2))
   Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


19.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671375000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671375000&lt;/contentUpdateDate&gt;
&lt;version&gt;19.1&lt;/version&gt;
a43 1
  
@


18.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671343000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671343000&lt;/contentUpdateDate&gt;
&lt;version&gt;18.1&lt;/version&gt;
d41 1
a41 1
$indexes.class.name
d44 1
a44 1
  $line
@


17.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671326000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671326000&lt;/contentUpdateDate&gt;
&lt;version&gt;17.1&lt;/version&gt;
d47 3
a49 3
   #set($tab=$arrayline.get(0))
   #set($key=$arrayline.get(1))
   #set($col=$arrayline.get(2))
@


16.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671251000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671251000&lt;/contentUpdateDate&gt;
&lt;version&gt;16.1&lt;/version&gt;
d43 1
a43 1
  #foreach($line in $indexes)
@


15.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374671208000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671208000&lt;/contentUpdateDate&gt;
&lt;version&gt;15.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())

 #foreach($wiki in $dbs)
  #foreach($line in $indexes)
  $line
   #set($arrayline = $stringtool.split($line,':'))
   $arrayline
   #set($tab=$arrayline.get(0))
   #set($key=$arrayline.get(1))
   #set($col=$arrayline.get(2))
   Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


14.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671148000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671148000&lt;/contentUpdateDate&gt;
&lt;version&gt;14.1&lt;/version&gt;
d44 7
a50 7
  #set($arrayline = $stringtool.split($line,':'))
 plop
  $arrayline
  #set($tab=$arrayline.get(0))
  #set($key=$arrayline.get(1))
  #set($col=$arrayline.get(2))
  Creating index $key of column $col on table $tab
@


13.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671139000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671139000&lt;/contentUpdateDate&gt;
&lt;version&gt;13.1&lt;/version&gt;
a42 1
 plop
d45 1
@


12.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671109000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671109000&lt;/contentUpdateDate&gt;
&lt;version&gt;12.1&lt;/version&gt;
a40 1
$indexes
d43 1
@


11.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374671070000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374671070000&lt;/contentUpdateDate&gt;
&lt;version&gt;11.1&lt;/version&gt;
d46 1
@


10.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374670917000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374670917000&lt;/contentUpdateDate&gt;
&lt;version&gt;10.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL2").getContent())
$indexes

 #foreach($wiki in $dbs)
  #foreach($line in $indexes)
  #set($arrayline = $stringtool.split($line,':'))
  #set($tab=$arrayline[0])
  #set($key=$arrayline[1])
  #set($col=$arrayline[2])
  Creating index $key of column $col on table $tab
  #end
 #end

#end
{{/velocity}}


{{groovy}}
/*
def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* Error creating indexes for wiki ${wiki}: " + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


9.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374670897000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374670897000&lt;/contentUpdateDate&gt;
&lt;version&gt;9.1&lt;/version&gt;
d50 1
@


8.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374669567000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374669567000&lt;/contentUpdateDate&gt;
&lt;version&gt;8.1&lt;/version&gt;
d40 1
a40 2

#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL").getContent())
d43 9
a57 1

d106 1
a106 1
    println "* &amp;lt;font color='red'&amp;gt;Error creating indexes for wiki ${wiki}: &amp;lt;/font&amp;gt;" + e.getMessage();
@


7.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374669534000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374669534000&lt;/contentUpdateDate&gt;
&lt;version&gt;7.1&lt;/version&gt;
d41 1
a41 1
#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL").getContent().split("n"))
@


6.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374669524000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374669524000&lt;/contentUpdateDate&gt;
&lt;version&gt;6.1&lt;/version&gt;
d41 1
a41 1
#set($indexes = $xwiki.getDocument("Admin.CheckIndexesSQL").getContent().split("n")
@


5.1
log
@@
text
@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xwikidoc&gt;
&lt;web&gt;Admin&lt;/web&gt;
&lt;name&gt;CheckIndexes2&lt;/name&gt;
&lt;language&gt;&lt;/language&gt;
&lt;defaultLanguage&gt;&lt;/defaultLanguage&gt;
&lt;translation&gt;0&lt;/translation&gt;
&lt;parent&gt;Admin.Tools&lt;/parent&gt;
&lt;creator&gt;XWiki.Admin&lt;/creator&gt;
&lt;author&gt;XWiki.Admin&lt;/author&gt;
&lt;customClass&gt;&lt;/customClass&gt;
&lt;contentAuthor&gt;XWiki.Admin&lt;/contentAuthor&gt;
&lt;creationDate&gt;1374669149000&lt;/creationDate&gt;
&lt;date&gt;1374669507000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374669507000&lt;/contentUpdateDate&gt;
&lt;version&gt;5.1&lt;/version&gt;
&lt;title&gt;XWiki Database Indexes Check&lt;/title&gt;
&lt;defaultTemplate&gt;&lt;/defaultTemplate&gt;
&lt;validationScript&gt;&lt;/validationScript&gt;
&lt;comment&gt;&lt;/comment&gt;
&lt;minorEdit&gt;false&lt;/minorEdit&gt;
&lt;syntaxId&gt;xwiki/2.1&lt;/syntaxId&gt;
&lt;hidden&gt;false&lt;/hidden&gt;
&lt;content&gt;{{velocity}}

#if($hasProgramming)
  #set($sqlTools = $xwiki.parseGroovyFromPage('SQLTools.SQLToolsGroovy'))
  #set($system = $sqlTools.getXWikiDatabaseSystem($xwiki, $xcontext))
  Your database is: **$system**
  #if($system == "HSQL Database Engine")
    {{warning}}$system is not supported for this action{{/warning}}
  #end

 #if($services.wikimanager)
    #set($dbs = $services.wikimanager.getAllWikis())
 #else
    #set($dbs = ["$xcontext.getDatabase()"])
 #end


#set($indexes = xwiki.getDocument("Admin.CheckIndexesSQL").getContent().split("n")
$indexes

#end
{{/velocity}}


{{groovy}}
/*

def creationNeeded = false;
for(wiki in dbs) {
 creationNeededForThisWiki = false;
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getObject(1);
  } catch (Exception e2) {}
  if (result!=null &amp;amp;&amp;amp; result.equals("xwikiattrecyclebin")) {
   println "* Indexes created for wiki ${wiki}" 
  } else {
   println "* &amp;lt;font color='red'&amp;gt;Indexes not created for wiki ${wiki}&amp;lt;/font&amp;gt;"
   creationNeeded = true;
   creationNeededForThisWiki = true;
  }
  stmt.close();
} catch (Exception e) {
   println "* &amp;lt;font color='red'&amp;gt;Failed to check indexes for wiki ${wiki}&amp;lt;/font&amp;gt;: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}
 if (creationNeededForThisWiki &amp;amp;&amp;amp; request.confirm=="1") {
  try {
    println "* Indexes will be created for wiki ${wiki}"
    store.beginTransaction(context);
    def session = store.getSession(context);
    def connection = session.connection();
    connection.setCatalog(wiki.toString());
    for (sql in indexes) {
     println "* Running sql: ${sql}";
    def stmt = connection.createStatement();
    try {
       stmt.execute(sql.replaceAll(";", ""));
       stmt.close();
    } catch (Exception e2) {
       println "* Error running sql: ${sql} " + e2.getMessage();
    } finally {
      stmt.close();
    }
   }
  } catch (Exception e) {
    println "* &amp;lt;font color='red'&amp;gt;Error creating indexes for wiki ${wiki}: &amp;lt;/font&amp;gt;" + e.getMessage();
  } finally { 
    store.endTransaction(context, false);
  }
 }

}

if (creationNeeded &amp;amp;&amp;amp; request.confirm!="1") {
  println "[[Confirm creation of indexes&amp;gt;&amp;gt;$doc||queryString='confirm=1']]"
}

*/
{{/groovy}}&lt;/content&gt;&lt;/xwikidoc&gt;
@


4.1
log
@@
text
@d4 1
a4 1
&lt;name&gt;CheckIndexes&lt;/name&gt;
d13 4
a16 4
&lt;creationDate&gt;1374224637000&lt;/creationDate&gt;
&lt;date&gt;1374666393000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374666393000&lt;/contentUpdateDate&gt;
&lt;version&gt;4.1&lt;/version&gt;
d24 1
a24 3
&lt;content&gt;{{groovy}}
def context = context.getContext();
def store = xwiki.getXWiki().getStore().getStore();
d26 7
a32 6
def dbs = []
if (services.wikimanager) {
    dbs = services.wikimanager.getAllWikis()
} else {
    dbs.add(xcontext.getMainWikiName())
}
d34 5
a38 1
def indexes = xwiki.getDocument("Admin.CheckIndexesSQL").getContent().split("n")
d40 11
d110 2
@


3.1
log
@@
text
@d14 3
a16 3
&lt;date&gt;1374666270000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374666270000&lt;/contentUpdateDate&gt;
&lt;version&gt;3.1&lt;/version&gt;
d38 1
a38 1
for(wiki in wikilist) {
d45 1
a45 2
  stmt.execute("show indexes from {{velocity filter="none"}}
${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
@


2.1
log
@Document converted from syntax xwiki/1.0 to syntax xwiki/2.1
@
text
@d14 3
a16 3
&lt;date&gt;1374666023000&lt;/date&gt;
&lt;contentUpdateDate&gt;1374666023000&lt;/contentUpdateDate&gt;
&lt;version&gt;2.1&lt;/version&gt;
d20 1
a20 1
&lt;comment&gt;Document converted from syntax xwiki/1.0 to syntax xwiki/2.1&lt;/comment&gt;
d25 1
a25 1
def context2 = context.getContext();
d27 8
a34 1
def wikilist =  xwiki.isVirtual() ? xwiki.getXWiki().getVirtualWikisDatabaseNames(xcontext.context) : [ "xwiki" ];
a36 2
if (!wikilist.contains("xwiki"))
 wikilist.add(0, "xwiki")
d41 2
a42 2
  store.beginTransaction(context2);
  def session = store.getSession(context2);
d64 1
a64 1
  store.endTransaction(context2, false);
d69 2
a70 2
    store.beginTransaction(context2);
    def session = store.getSession(context2);
d88 1
a88 1
    store.endTransaction(context2, false);
d95 1
a95 2
  println "[Confirm creation of indexes&amp;gt;$doc.fullName
{{/velocity}}?confirm=1]"
@


1.1
log
@Imported from XAR
@
text
@d14 3
a16 3
&lt;date&gt;1357143512000&lt;/date&gt;
&lt;contentUpdateDate&gt;1357143512000&lt;/contentUpdateDate&gt;
&lt;version&gt;1.1&lt;/version&gt;
d20 1
a20 1
&lt;comment&gt;Imported from XAR&lt;/comment&gt;
d22 1
a22 1
&lt;syntaxId&gt;xwiki/1.0&lt;/syntaxId&gt;
d24 1
a24 1
&lt;content&gt;&amp;lt;%
d28 1
a28 1
def indexes = xwiki.getDocument("Admin.CheckIndexesSQL").getContent().split("\n")
d40 2
a41 1
  stmt.execute("show indexes from ${wiki}.xwikiattrecyclebin where column_name='xda_deleter'");
d90 2
a91 1
  println "[Confirm creation of indexes&amp;gt;$doc.fullName?confirm=1]"
d93 1
a93 1
%&amp;gt;&lt;/content&gt;&lt;/xwikidoc&gt;
@
</versions></xwikidoc>