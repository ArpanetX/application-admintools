<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>Admin</web>
  <name>ExportAllWikis</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Admin.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1262300400000</creationDate>
  <date>1262300400000</date>
  <contentUpdateDate>1262300400000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/1.0</syntaxId>
  <hidden>false</hidden>
  <content>1.1 Export All Wikis

&lt;% 

import com.xpn.xwiki.*;
import com.xpn.xwiki.api.*;
import com.xpn.xwiki.doc.*;
import com.xpn.xwiki.plugin.packaging.*;
import java.util.*;
import java.util.zip.*;
import java.file.*;
import java.io.*;
import com.xpn.xwiki.util.Util;
import org.dom4j.*;
import org.dom4j.io.*;
import org.dom4j.dom.*;

// get package xml file
def String getPackageXML(doc,context) {
        OutputFormat outputFormat = new OutputFormat("", true);
        outputFormat.setEncoding(context.getWiki().getEncoding());
        StringWriter out = new StringWriter();
        XMLWriter writer = new XMLWriter(out, outputFormat);
        try {
            writer.write(doc);

            return out.toString();
        } catch (IOException e) {
            e.printStackTrace();

            return "";
        }
}

// prepare main DOM Document for package.xml
def org.dom4j.Element getXMLDocumentElement(xmldoc, packname, context) {
        org.dom4j.Element docel = new DOMElement("package");
        xmldoc.setRootElement(docel);
        org.dom4j.Element elInfos = new DOMElement("infos");
System.out.println("here 3");
        docel.add(elInfos);

        org.dom4j.Element el = new DOMElement("name");
        el.addText(packname);
        elInfos.add(el);

        el = new DOMElement("description");
        el.addText("");
        elInfos.add(el);

        el = new DOMElement("licence");
        el.addText("");
        elInfos.add(el);

        el = new DOMElement("author");
        el.addText("");
        elInfos.add(el);

        el = new DOMElement("version");
        el.addText("");
        elInfos.add(el);

        el = new DOMElement("backupPack");
        el.addText(new Boolean(true).toString());
        elInfos.add(el);

        el = new DOMElement("preserveVersion");
        el.addText(new Boolean(true).toString());
        elInfos.add(el);
        return docel;
    }

// adding on file
def addDocumentToXML(xdoc, elfiles) { 
     org.dom4j.Element elfile = new DOMElement("file");
     elfile.addAttribute("language", String.valueOf(xdoc.getLanguage()));
     elfile.addText(java.net.URLEncoder.encode(xdoc.getFullName()));
     elfiles.add(elfile);
}

def addToDir(pack, XWikiDocument doc, File dir, boolean withVersions, XWikiContext context) throws XWikiException
    {
        try {
            dirname = java.net.URLEncoder.encode(doc.getSpace());      
            File spacedir = new File(dir, dirname);
            if (!spacedir.exists()) {
                if (!spacedir.mkdirs()) {
                    Object[] args = new Object[1];
                    args[0] = doc.getSpace();
                    throw new XWikiException(XWikiException.MODULE_XWIKI, XWikiException.ERROR_XWIKI_MKDIR,
                        "Error creating directory {0}", null, args);
                }
            }
            String filename = pack.getFileNameFromDocument(doc, context);
            filename = java.net.URLEncoder.encode(filename);      
            File file = new File(spacedir, filename);
            String xml = doc.toXML(true, false, true, withVersions, context);
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(xml.getBytes(context.getWiki().getEncoding()));
            fos.flush();
            fos.close();
        } catch (ExcludeDocumentException e) {
            LOG.info("Skip the document " + doc.getFullName());
        } catch (Exception e) {
            Object[] args = new Object[1];
            args[0] = doc.getFullName();

            throw new XWikiException(XWikiException.MODULE_XWIKI_DOC, XWikiException.ERROR_XWIKI_DOC_EXPORT,
                "Error creating file {0}", e, args);
        }
    }


def getXAR(String packname, String filename, XWikiContext context) { 
    def debug = "";
    def request = context.getRequest();
    def pack = new Package();
    
    // preparing package xml file
    def xmldoc = new DOMDocument();
    org.dom4j.Element docel = getXMLDocumentElement(xmldoc, packname, context);
    org.dom4j.Element elfiles = new DOMElement("files");
    docel.add(elfiles);

    def dir = new File(filename);
    XWiki wiki = context.getWiki();
    def i;
    List documentNames = wiki.getStore().getQueryManager().getNamedQuery("getAllDocuments").execute();
    for (i=0;i&lt;documentNames.size();i++) {
           def docName = documentNames.get(i);
       try {
           XWikiDocument doc = context.getWiki().getDocument(docName, context);

           String fname = pack.getFileNameFromDocument(doc, context);
           fname = java.net.URLEncoder.encode(fname);
           System.out.println("Export: " + docName + "-" + doc.getLanguage() + "-" + doc.getDefaultLanguage() + "-" + fname);
           addToDir(pack, doc, dir, true, context);
           addDocumentToXML(doc, elfiles);
        
           List languages = doc.getTranslationList(context);
           def j;
           for (j= 0; j &lt; languages.size();j++) {
               def language = languages.get(j);
               if (!((language == null) || (language.equals("")) || (language.equals(doc.getDefaultLanguage())))) {
                 def tdoc = doc.getTranslatedDocument(language, context);
                 fname = pack.getFileNameFromDocument(tdoc, context);
                 fname = java.net.URLEncoder.encode(fname);
                 if (doc==tdoc) 
                  System.out.println("Export error same doc: " + docName + "-" + language);
                 System.out.println("Export: " + docName + "-" + tdoc.getLanguage() + "-" + tdoc.getDefaultLanguage() + "-" + fname);
                 addToDir(pack, tdoc, dir, true, context);
                 addDocumentToXML(doc, elfiles);
             }
          }

          // export package.xml
          String pxml = getPackageXML(xmldoc, context);
          File file = new File(dir, "package.xml");
          FileOutputStream fos = new FileOutputStream(file);
          fos.write(pxml.getBytes(context.getWiki().getEncoding()));
          fos.flush();
          fos.close();

        } catch (Throwable e) {
             System.out.println("Export: fail with exception: " + e.getMessage());
             e.printStackTrace();
             debug += "* " + docName + "\n"
        }
       }
}

if (request.confirm) {
   println "Exporting the following wiki list: \n";
   def db = context.getDatabase();
   for (wiki in xwiki.wikimanager.getAllWikis()) {
     def wikiname = wiki.wikiName;
     if (wikiname.equals("intranet")) {
     try {
       println "* ${wikiname}";
       System.out.println("Exporting wiki ${wikiname}");
       context.getContext().setDatabase(wikiname);
       println getXAR(wikiname, "${request.dirname}/${wikiname}/", context.getContext())
     } catch (Throwable e) {
       println "* Failed exporting ${wikiname}"; 
       e.printStackTrace();
     }
     }
   }
   context.getContext().setDatabase(db);
   System.out.println("Finishing exporting wikis");
  } else {
   println "Ready to export the following wiki list: \n";
   for (wiki in xwiki.wikimanager.getAllWikis()) {
    if (wiki.wikiName.equals("intranet")) {
      println "* ${wiki}";
    }   
   }
%&gt;
&lt;form action="" method="post"&gt;
&lt;table border="0"&gt;
&lt;tr&gt;
&lt;td&gt;File to write to:&lt;/td&gt;&lt;td&gt;&lt;input type="text" name="dirname" size="60" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan="2" align="center"&gt;
&lt;input type="checkbox" name="confirm" value="1" /&gt; Confirm
&lt;br /&gt;
&lt;input type="submit" name="Export" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;
&lt;%
  }
%&gt;</content>
</xwikidoc>
